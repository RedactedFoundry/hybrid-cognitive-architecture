[tool.poetry]
name = "hybrid-cognitive-architecture"
version = "0.1.0"
description = "A distributed AI system implementing a 3-layer cognitive architecture with multiple specialized agents"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "core"}, {include = "clients"}, {include = "schemas"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core web framework and async support
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
aiohttp = "^3.9.0"

# LangGraph and related AI frameworks
langgraph = "^0.2.0"
langchain-core = "^0.3.0"

# Data validation and serialization
pydantic = "^2.0.0"

# Pin setuptools to avoid pkg_resources deprecation warnings
setuptools = "<81"

# Graph database clients
pytigergraph = "^1.9.0"

# Redis client
redis = "^5.0.0"

# Structured logging
structlog = "^23.0.0"

# Environment management
python-dotenv = "^1.0.0"

# HTTP client for external APIs
httpx = "^0.25.0"

# Data processing
pandas = "^2.1.0"
numpy = "^1.25.0"

# Configuration management
pyyaml = "^6.0"

# Ollama client for multi-model LLM serving
# Will use OpenAI-compatible API via HTTP requests (aiohttp already included)
python-multipart = "^0.0.20"

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.11.0"

# Chaos engineering and container management
docker = "^7.0.0"

# Code formatting and linting
black = "^23.0.0"
ruff = "^0.1.0"

# Type checking
mypy = "^1.5.0"

# Development tools
ipython = "^8.15.0"
jupyter = "^1.0.0"

[tool.poetry.group.production.dependencies]
# Production server
gunicorn = "^21.2.0"

# Monitoring and metrics
prometheus-client = "^0.17.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning:langgraph.*",
    "ignore:.*config_type.*deprecated.*:DeprecationWarning",
    "ignore:pkg_resources is deprecated.*:UserWarning",
    "ignore:.*pkg_resources.declare_namespace.*:DeprecationWarning"
]
markers = [
    "asyncio: marks tests as async (deselect with '-m \"not asyncio\"')",
    "chaos: marks tests as chaos engineering tests",
    "integration: marks tests as integration tests"
]